<?php
declare(strict_types=1);

namespace Fiskalizacija;

use DateTime;
use Fiskalizacija\Interfaces\Cashier;
use Fiskalizacija\Interfaces\Invoice;
use Fiskalizacija\Interfaces\InvoiceType;
use Fiskalizacija\Interfaces\Item;
use Fiskalizacija\Interfaces\Options;
use Fiskalizacija\Interfaces\Payment;
use Fiskalizacija\Interfaces\TransactionType;
use GuzzleHttp\RequestOptions;

abstract class Request
{

    /**
     * @var string
     */
    private string $requestId;

    /**
     * Cost Center ID provided by the buyer to the cashier in case Buyerâ€™s company wants to track spending in
     * Taxpayer Portal. It is optional and may exist only for B2B transactions; otherwise, it shall be ignored by E-SDC.
     *
     * @return string|null
     */
    private ?string $buyerCostCenterId;

    /**
     * Mandatory only in case Interfaces Type is Refund, Copy or Normal Sale connected to an Advance Sale. In all cases,
     * this field must contain Interfaces Number of previously issued invoice. In any other case this field is optional.
     * ASCII, in the requestedBy-signedBy- Ordinal_Number format. Unicode MaxLength : 50
     *
     * @return string|null
     */
    private ?string $referentDocumentNumber;

    /**
     * SDC Date and time of the document referenced in referentDocumentDT field.
     * It is used to calculate taxes on the date of issue of the original document that is refunded or copied.
     *
     * @return string|null
     */
    private ?string $referentDocumentDateTime;

    /**
     * Interfaces number generated by a POS.
     *
     * @return string|null
     */
    private string $invoiceNumber;

    /**
     * Current Local Date and Time in ISO 8601 format.
     *
     * @return DateTime
     */
    private DateTime $dateAndTimeOfIssue;

    /**
     * Each invoice contains at least one Item in Items collection
     * (E-SDC should support minimum 250, recommended up to 500)
     *
     * @return Item[]
     */
    private array $items;

    /**
     * List of Payments for the invoice, where each Payment defines its method and amount
     *
     * @return Payment[]
     */
    private array $payments;

    /**
     * Cashierâ€™s identification.
     *
     * @return Cashier
     */
    private Cashier $cashier;

    /**
     * Taxpayer ID of the Buyer. It is mandatory for B2B transactions; otherwise, it's optional.
     *
     * @return string|null
     */
    private ?string $buyerId;

    /**
     * @param Invoice $invoice
     */
    public function __construct(Invoice $invoice)
    {
        $this->requestId = $invoice->requestId();
        $this->dateAndTimeOfIssue = $invoice->issueDateTime();
        $this->cashier = $invoice->cashier();
        $this->buyerId = $invoice->buyer()->buyerId();
        $this->buyerCostCenterId = $invoice->buyer()->buyerCostCenterId();
        $this->payments = $invoice->paymentTypes();
        $this->invoiceNumber = $invoice->number();
        $this->referentDocumentNumber = $invoice->referentDocumentNumber();
        $this->referentDocumentDateTime = $invoice->referentDocumentDateTime();
        $this->items = $invoice->items();
    }

    /**
     * @return string
     */
    public function getRequestId(): string
    {
        return $this->requestId;
    }

    /**
     * @return InvoiceType
     */
    public function getInvoiceType(): InvoiceType
    {
        return $this->invoiceType();
    }

    /**
     * Interfaces Type enumeration value: 0 - Normal, 1 - Proforma, 2 - Copy, 3 - Training, 4 - Advance
     *
     * @return InvoiceType
     */
    abstract protected function invoiceType(): InvoiceType;

    /**
     * @return TransactionType
     */
    public function getTransactionType(): TransactionType
    {
        return $this->transactionType();
    }

    /**
     * Transaction Type enumeration
     * 0 - Sale
     * 1 - Refund
     *
     * @return TransactionType
     */
    abstract protected function transactionType(): TransactionType;

    /**
     * @return string|null
     */
    public function getBuyerCostCenterId(): ?string
    {
        return $this->buyerCostCenterId;
    }

    /**
     * @return string|null
     */
    public function getReferentDocumentNumber(): ?string
    {
        return $this->referentDocumentNumber;
    }

    /**
     * @return string|null
     */
    public function getReferentDocumentDateTime(): ?string
    {
        return $this->referentDocumentDateTime;
    }

    /**
     * @return string
     */
    public function getInvoiceNumber(): string
    {
        return $this->invoiceNumber;
    }

    /**
     * @return DateTime
     */
    public function getDateAndTimeOfIssue(): DateTime
    {
        return $this->dateAndTimeOfIssue;
    }

    /**
     * @return Item[]
     */
    public function getItems(): array
    {
        return $this->items;
    }

    /**
     * @return Payment[]
     */
    public function getPayments(): array
    {
        return $this->payments;
    }

    /**
     * @return Cashier
     */
    public function getCashier(): Cashier
    {
        return $this->cashier;
    }

    /**
     * @return string|null
     */
    public function getBuyerId(): ?string
    {
        return $this->buyerId;
    }

    /**
     * @return array
     * @noinspection PhpArrayShapeAttributeCanBeAddedInspection
     */
    protected function apiOptions(): array
    {
        return [
            RequestOptions::CERT    => [
                $this->configuration->certPath(),
                $this->configuration->password(),
            ],
            RequestOptions::HEADERS => [
                'Accept'          => 'application/json',
                'Content-Type'    => 'application/json',
                'RequestId'       => $this->invoice->requestId(),
                'Accept-Language' => $this->configuration->language(),
                'PAC'             => $this->configuration->pac(),
            ],
            RequestOptions::JSON    => $this->requestBody(),
        ];
    }

    /**
     * @return string[]
     */
    private function requestBody(): array
    {
        return [
            'dateAndTimeOfIssue'     => $this->dateAndTimeOfIssue->format(DATE_ISO8601),
            'cashier'                => $this->cashier->identifier(),
            'buyerId'                => $this->buyerId,
            'buyerCostCenterId'      => $this->buyerCostCenterId,
            'invoiceType'            => $this->invoiceType()->value,
            'transactionType'        => $this->transactionType()->value,
            'payment'                => $this->payments(),
            'invoiceNumber'          => $this->invoiceNumber,
            'referentDocumentNumber' => $this->referentDocumentNumber,
            'referentDocumentDT'     => $this->referentDocumentDateTime instanceof DateTime
                ? $this->referentDocumentDateTime->format(DATE_ISO8601)
                : $this->referentDocumentDateTime,
            'options'                => $this->options(),
            'items'                  => $this->items(),
        ];
    }

    /**
     * List of Payments for the invoice, where each Payment defines its method and amount
     *
     * @return Payment[]
     */
    private function payments(): array
    {
        return array_map(function (Payment $payment): array {
            return [
                'amount'      => $payment->amount(),
                'paymentType' => $payment->type(),
            ];
        }, $this->payments);
    }

    /**
     * @return array
     * @noinspection PhpArrayShapeAttributeCanBeAddedInspection
     */
    private function options(): array
    {
        return [
            'OmitQRCodeGen'             => intval($this->optionsConfiguration()->omitQRCodeGen()),
            'OmitTextualRepresentation' => intval($this->optionsConfiguration()->omitTextualRepresentation()),
        ];
    }

    /**
     * Key/value collection defines the output of E-SDC invoice fiscalization, to optimize resources. Key: OmitQRCodeGen
     * Key: OmitQRCodeGen
     * Value: "1" to omit QR Code generation by E-SDC and "0" to generate and return QR code.
     * Key: OmitTextualRepresentation
     * Value: "1" to omit generation of textual representation by E-SDC and "0" to generate
     * return textual representation to POS.
     *
     * @return Options
     */
    private function optionsConfiguration(): Options
    {
        return new class implements Options {

            /**
             * @return bool
             */
            public function omitQRCodeGen(): bool
            {
                return false;
            }

            /**
             * @return bool
             */
            public function omitTextualRepresentation(): bool
            {
                return false;
            }
        };
    }

    /**
     * Each invoice contains at least one Item in Items collection
     * (E-SDC should support minimum 250, recommended up to 500)
     *
     * @return Item[]
     */
    private function items(): array
    {
        return array_map(function (Item $item): array {
            return [
                'gtin'        => $item->globalTradeItemNumber(),
                'name'        => $item->name(),
                'quantity'    => $item->quantity(),
                'unitPrice'   => $item->price(),
                'labels'      => $item->labels(),
                'totalAmount' => $item->amount(),
            ];
        }, $this->items);
    }
}
